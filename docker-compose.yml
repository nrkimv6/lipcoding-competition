version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15
    container_name: mm-matching-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-102030}
      POSTGRES_DB: ${POSTGRES_DB:-mm_matching}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mm-matching-network
    restart: unless-stopped

  # Redis (세션/캐시용, 선택사항)
  redis:
    image: redis:7-alpine
    container_name: mm-matching-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mm-matching-network
    restart: unless-stopped

  # FastAPI 백엔드
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: mm-matching-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-102030}@postgres:5432/${POSTGRES_DB:-mm_matching}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./apps/backend:/app
      - /app/__pycache__
    depends_on:
      - postgres
      - redis
    networks:
      - mm-matching-network
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Next.js 프론트엔드
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: mm-matching-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${BACKEND_PORT:-8000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - mm-matching-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  mm-matching-network:
    driver: bridge
